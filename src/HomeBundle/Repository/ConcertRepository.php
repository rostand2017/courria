<?php

namespace HomeBundle\Repository;

/**
 * AdminRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ConcertRepository extends \Doctrine\ORM\EntityRepository
{
    public function getUniqueConcert($id){
        $qb = $this->createQueryBuilder("c");
        $qb->where("c.id = :id")
            ->setParameter(":id", $id);
        return $qb->getQuery()->getOneOrNullResult();
    }
    public function countDateConcert($nbPage, $page, $begin=null, $end=null){
        $page = (int) $page;
        $nbPage = (int) $nbPage;
        $sql="SELECT COUNT(*) FROM concert c ";
        if($begin)
            $sql .= " WHERE c.date BETWEEN :begin AND :end ";

        $state = $this->_em->getConnection()->prepare($sql);
        if($begin) {
            $begin = date_format( new \DateTime($begin), "y-m-d");
            $end = date_format( new \DateTime($end), "y-m-d");
            $state->bindValue(":begin", $begin, \PDO::PARAM_STR);
            $state->bindValue(":end", $end, \PDO::PARAM_STR);
        }
        $state->execute();
        return $state->fetch(\PDO::FETCH_COLUMN);
    }
    public function getSearchDateConcert($limit, $offset, $begin=null, $end=null){
        $offset = (int) $offset;
        $limit = (int) ($limit - 1) *$offset;
        $sql="SELECT c.id, c.prix, c.intitule, c.description,c.date,c.affiche, s.nom, s.lieu FROM concert c INNER JOIN salle s ON a.sal_id = s.id";
        if($begin)
            $sql .= " WHERE c.date BETWEEN :begin AND :end ";

        $sql .= " LIMIT :limit,:offset";

        $state = $this->_em->getConnection()->prepare($sql);
        if($begin){
            $begin = date_format( new \DateTime($begin), "y-m-d");
            $end = date_format( new \DateTime($end), "y-m-d");
            $state->bindValue(":begin", $begin,\PDO::PARAM_STR);
            $state->bindValue(":end", $end,\PDO::PARAM_STR);
        }

        $state->bindValue(":limit", $limit,\PDO::PARAM_INT);
        $state->bindValue(":offset", $offset,\PDO::PARAM_INT);
        $state->execute();
        return $state->fetchAll();
    }
}
